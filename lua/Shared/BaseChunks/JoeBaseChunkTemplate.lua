local JoeBuildingIdentifierModule = import("/mods/fa-joe-ai/lua/Shared/BaseChunks/JoeBuildingIdentifiers.lua")

local TableGetn = table.getn
local TableInsert = table.insert

local MathFloor = math.floor

---@class JoeBaseChunkLocation
---@field [1] number    # X offset
---@field [2] number    # Z offset
---@field [3] number    # orientation

---@class JoeBaseChunk
---@field Name string       # Optional name of the chunk.
---@field Size number       # Size of the chunk (length of one side, in world units).
---@field Faction string    # For what faction this chunk is intended.
---@field Units UnitId[]    # Accessible list of all unique unit identifiers that we can use to process this chunk.
---@field Locations table<JoeBuildingIdentifier, JoeBaseChunkLocation[]>     # Maps identifiers with build locations.

---@class AIBaseChunkLocation
---@field OffsetX number
---@field OffsetY number

--- A chunk of a base. Describes various locations for specific units and unit categories.
---@class JoeBaseChunkTemplate
---@field Faction string
---@field Name string      # Optional name of the template.
---@field Units UnitId[]    # All the units (read: structures) that are part of this chunk. This list exists to make it easier to interact with entity (unit) functions.
---@field Size number
---@field Locations table<UnitId, AIBaseChunkLocation>

---@class AILoadedBaseChunkTemplate : JoeBaseChunkTemplate
---@field Source string
---@field SourceField string

--- Converts world coordinates to chunk coordinates.
---@param n number
---@param size number
---@return integer
local function ToChunkCoordinates(n, size)
    return MathFloor(n / size)
end

--- Get all (non-unique) unit ids of a list of (user) units.
---@param units JoeUnit[]
---@return UnitId[]
local function GetUniqueUnitIds(units)
    local seen = {}
    local unitIds = {}

    ---@param unit UserUnit
    for _, unit in units do
        local unitId = unit:GetUnitId()
        if not seen[unitId] then
            seen[unitId] = true
            TableInsert(unitIds, unitId)
        end
    end

    return unitIds
end

--- Get all build offsets of a list of (user) units.
---@param units JoeUnit[]
---@param size number
---@return table<JoeBuildingIdentifier, JoeBaseChunkLocation[]>
local function GetLocations(units, size)
    local locations = {}

    ---@param unit UserUnit
    for _, unit in units do
        local unitId = unit:GetUnitId()
        local buildingIdentifier = JoeBuildingIdentifierModule.MapToIdentifier(unitId)
        local position = unit:GetPosition()

        ---@type JoeBaseChunkLocation
        local location = {

            -- there's something odd, it appears that all buildings are offset by 0.5 units. This
            -- causes coordinates such as 3.5 where you'd expect 3 or 4. This appears to be consistent,
            -- so we just adjust for it here by subtracting 0.5 from both coordinates.

            position[1] - ToChunkCoordinates(position[1], size) * size - 0.5,
            position[3] - ToChunkCoordinates(position[3], size) * size - 0.5,
            0, -- orientation is not used at the moment
        }

        locations[buildingIdentifier] = locations[buildingIdentifier] or {}
        TableInsert(locations[buildingIdentifier], location)
    end

    return locations
end

--- Creates an a base chunk template that is used by AIs.
---@param units JoeUnit[]
---@param size number
---@return JoeBaseChunkTemplate
function CreateTemplate(units, size)
    -- assertions
    if type(units) ~= "table" or TableGetn(units) == 0 then
        error("Units must be a non-empty table")
    end

    -- assertions
    if size < 1 or size > 256 then
        error(string.format("Size should be between 1 and 256, but is %s", tostring(size)))
    end

    ---@type JoeBaseChunkTemplate
    local template = {
        Faction = units[1]:GetBlueprint().FactionCategory,
        Name = "Unnamed template",
        Size = size,
        Units = GetUniqueUnitIds(units),
        Locations = GetLocations(units, size),
    }

    return template
end

---Serializes the given template to a Lua string that can be used in a file.
---@param template JoeBaseChunkTemplate
---@return string
function SerializeTemplate(template)
    local Utils = import("/mods/fa-joe-ai/lua/Utils.lua")

    local stringified = table.concat(
        {
            "-- This code is generated by the Average Joe AI mod. For more information, visit: ",
            "-- - https://github.com/Garanas/fa-joe-ai",
            "",
            "---@type JoeBaseChunk",
            string.format("Template =%s", Utils.SerializeValue(template))
        },
        "\r\n"
    )

    return stringified
end

-------------------------------------------------------------------------------
--#region Debug functionality

-- Functionality that is related to debugging.

---@param blueprint UnitBlueprint
---@param axe 'SizeX' | 'SizeZ'
---@return number
local function TemplateAxisOffset(blueprint, axe)
    return (math.mod(math.ceil(blueprint.Footprint and blueprint.Footprint[axe] or blueprint[axe] or 1), 2) == 1 and 0 or 0.5)
end

--- Transforms a base chunk template into a build template that we all know and love.
---@param template JoeBaseChunkTemplate
---@return UIBuildTemplate
function ToBuildTemplate(template)
    ---@type UIBuildTemplate
    local buildTemplate = {
        template.Size,
        template.Size,
    }

    local buildOrder = 1

    ---@param buildingIdentifier UnitId
    ---@param locations AIBaseChunkLocation[]
    for buildingIdentifier, locations in template.Locations do
        local buildingCategories = JoeBuildingIdentifierModule.MapToCategory(buildingIdentifier)
        if buildingCategories then
            local unitId = EntityCategoryGetUnitList(buildingCategories * categories[template.Faction])[1]
            if unitId then
                ---@param location AIBaseChunkLocation
                for _, location in locations do
                    buildOrder = buildOrder + 1

                    -- fix 1x1 and 3x3 buildings to be centered correctly
                    local blueprint = __blueprints[unitId] --[[@as UnitBlueprint]]
                    local offsetX = TemplateAxisOffset(blueprint, 'SizeX')
                    local offsetZ = TemplateAxisOffset(blueprint, 'SizeZ')

                    TableInsert(buildTemplate, { unitId, buildOrder, location[1] + offsetX, location[2] + offsetZ })
                end
            else
                WARN(string.format("No unit found for building identifier '%s'", tostring(buildingIdentifier), tostring(buildingCategories)))
            end
        else
            WARN(string.format("No building categories found for identifier '%s'", tostring(buildingIdentifier)))
        end
    end

    -- adjust all coordinates so that the first building is at (0,0)
    local offsetX = buildTemplate[3][3]
    local offsetZ = buildTemplate[3][4]

    for k = 3, TableGetn(buildTemplate) do
        local entry = buildTemplate[k]
        entry[3] = entry[3] - offsetX
        entry[4] = entry[4] - offsetZ
    end

    return buildTemplate
end

--- Starts the command mode using the giving base chunk template. The template snaps to the template size.
---@param template JoeBaseChunkTemplate
function PreviewTemplate(template)
    local buildTemplate = ToBuildTemplate(template)

    SelectUnits(nil)
    local commandModeModule = import("/lua/ui/game/commandmode.lua")
    commandModeModule.StartCommandMode("build", {
        name = buildTemplate[3][1],
        cheat = true,
        army = GetFocusArmy(),
        count = 1,
        vet = 0,
        yaw = 0,
        rand = 0,
        CreateTarmac = true,
        MeshOnly = false,
        ShowRaisedPlatforms = false,
        UnitIconCameraMode = false,
        selection = {} }
    )
    SetActiveBuildTemplate(buildTemplate)

end
